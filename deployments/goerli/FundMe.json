{
  "address": "0x3e03e52eC66B83Cdcf8D8e9baE8434196532489F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fundingAddress",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdce614955bb0e25c6e239b7f101a611fac6cf36a53dc9e7ca12a9506e6f39341",
  "receipt": {
    "to": null,
    "from": "0x6139F737Dc39a3ec031dc4831D92cC9881C710a9",
    "contractAddress": "0x3e03e52eC66B83Cdcf8D8e9baE8434196532489F",
    "transactionIndex": 24,
    "gasUsed": "1084463",
    "logsBloom": "0x
    "blockHash": "0xa1b0b27a7b765b7fccc640c860c70a70f5ee845ec944e99412e320588931040c",
    "transactionHash": "0xdce614955bb0e25c6e239b7f101a611fac6cf36a53dc9e7ca12a9506e6f39341",
    "logs": [],
    "blockNumber": 9224983,
    "cumulativeGasUsed": "7501022",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"
  ],
  "numDeployments": 2,
  "solcInputHash": "a0d9642b6fc1965fad5248d6ac9fd94c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingAddress\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Patrick Collins\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"getAddressToAmountFunded(address)\":{\"params\":{\"fundingAddress\":\"the address of the funder\"},\"returns\":{\"_0\":\"the amount funded\"}}},\"title\":\"A sample Funding Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"Funds our contract based on the ETH/USD price\"},\"getAddressToAmountFunded(address)\":{\"notice\":\"Gets the amount that an address has funded\"}},\"notice\":\"This contract is for creating a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// 1. Pragma\\npragma solidity ^0.8.7;\\n// 2. Imports\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// 3. Interfaces, Libraries, Contracts\\nerror FundMe__NotOwner();\\n\\n/**@title A sample Funding Contract\\n * @author Patrick Collins\\n * @notice This contract is for creating a sample funding contract\\n * @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    // Type Declarations\\n    using PriceConverter for uint256;\\n\\n    // State variables\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n    address private immutable i_owner;\\n\\n    // We are adding _s as it is a storage variable (Reading, Writing & Updating from storage variables costs high amount of gas)\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    AggregatorV3Interface public s_priceFeed;\\n\\n    // Events (we have none!)\\n\\n    // Modifiers\\n    modifier onlyOwner() {\\n        // require(msg.sender == i_owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    // Functions Order:\\n    //// constructor\\n    //// receive\\n    //// fallback\\n    //// external\\n    //// public\\n    //// internal\\n    //// private\\n    //// view / pure\\n\\n    constructor(address priceFeed) {\\n        s_priceFeed = AggregatorV3Interface(priceFeed);\\n        i_owner = msg.sender;\\n    }\\n\\n    /// @notice Funds our contract based on the ETH/USD price\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // Transfer vs call vs Send\\n        // payable(msg.sender).transfer(address(this).balance);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    // This costs less gas as we are using memory variable instead of frequently calling storage variable\\n    function cheaperWithdraw() public onlyOwner {\\n        address[] memory funders = s_funders;\\n        // mappings can't be in memory, sorry!\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // payable(msg.sender).transfer(address(this).balance);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    /** @notice Gets the amount that an address has funded\\n     *  @param fundingAddress the address of the funder\\n     *  @return the amount funded\\n     */\\n    function getAddressToAmountFunded(\\n        address fundingAddress\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[fundingAddress];\\n    }\\n\\n    function getVersion() public view returns (uint256) {\\n        return s_priceFeed.version();\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x17d2aa84e44e8cadd701da6a9d76cee1ba811e227bfb8647a7976732cda9256e\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n  function getPrice(AggregatorV3Interface priceFeed)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    (, int256 answer, , , ) = priceFeed.latestRoundData();\\n    // ETH/USD rate in 18 digit\\n    return uint256(answer * 10000000000);\\n  }\\n\\n  // 1000000000\\n  // call it get fiatConversionRate, since it assumes something about decimals\\n  // It wouldn't work for every aggregator\\n  function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 ethPrice = getPrice(priceFeed);\\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n    // the actual ETH/USD conversation rate, after adjusting the extra 0s.\\n    return ethAmountInUsd;\\n  }\\n}\",\"keccak256\":\"0x0ef9b5199cc0e9d5fca1aff75ca10a52033d784f24b3a6f6ab9e916b71d920b4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620013ca380380620013ca833981810160405281019062000037919062000120565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c61123d6200018d60003960008181610337015281816104ca01528181610570015281816106fb01526108f1015261123d6000f3fe6080604052600436106100915760003560e01c8063893d20e811610059578063893d20e81461016b5780639e87a5cd14610196578063b60d4288146101c1578063be2693f0146101cb578063d7b4750c146101e257610091565b80630343fb25146100965780630d8e6e2c146100d35780630ec3b027146100fe5780633ccfd60b146101295780636b69a59214610140575b600080fd5b3480156100a257600080fd5b506100bd60048036038101906100b89190610bb4565b61021f565b6040516100ca9190610bfa565b60405180910390f35b3480156100df57600080fd5b506100e8610268565b6040516100f59190610bfa565b60405180910390f35b34801561010a57600080fd5b5061011361030f565b6040516101209190610c74565b60405180910390f35b34801561013557600080fd5b5061013e610335565b005b34801561014c57600080fd5b5061015561055f565b6040516101629190610bfa565b60405180910390f35b34801561017757600080fd5b5061018061056c565b60405161018d9190610c9e565b60405180910390f35b3480156101a257600080fd5b506101ab610594565b6040516101b89190610c74565b60405180910390f35b6101c96105be565b005b3480156101d757600080fd5b506101e06106f9565b005b3480156101ee57600080fd5b5061020960048036038101906102049190610ce5565b610987565b6040516102169190610c9e565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156102d257600080fd5b505afa1580156102e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030a9190610d27565b905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103ba576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104655760008082815481106103df576103de610d54565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061045d90610db2565b9150506103bd565b50600067ffffffffffffffff81111561048157610480610dfb565b5b6040519080825280602002602001820160405280156104af5781602001602082028036833780820191505090505b50600090805190602001906104c5929190610aaa565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161050c90610e5b565b60006040518083038185875af1925050503d8060008114610549576040519150601f19603f3d011682016040523d82523d6000602084013e61054e565b606091505b505090508061055c57600080fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006105fd600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346109ce90919063ffffffff16565b101561063e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063590610ecd565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461068d9190610eed565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461077e576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561080157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116107b7575b5050505050905060005b815181101561088c57600082828151811061082957610828610d54565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061088490610db2565b91505061080b565b50600067ffffffffffffffff8111156108a8576108a7610dfb565b5b6040519080825280602002602001820160405280156108d65781602001602082028036833780820191505090505b50600090805190602001906108ec929190610aaa565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161093390610e5b565b60006040518083038185875af1925050503d8060008114610970576040519150601f19603f3d011682016040523d82523d6000602084013e610975565b606091505b505090508061098357600080fd5b5050565b600080828154811061099c5761099b610d54565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806109da83610a0a565b90506000670de0b6b3a764000085836109f39190610f43565b6109fd9190610fcc565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a5357600080fd5b505afa158015610a67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8b9190611075565b5050509150506402540be40081610aa291906110f0565b915050919050565b828054828255906000526020600020908101928215610b23579160200282015b82811115610b225782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610aca565b5b509050610b309190610b34565b5090565b5b80821115610b4d576000816000905550600101610b35565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b8182610b56565b9050919050565b610b9181610b76565b8114610b9c57600080fd5b50565b600081359050610bae81610b88565b92915050565b600060208284031215610bca57610bc9610b51565b5b6000610bd884828501610b9f565b91505092915050565b6000819050919050565b610bf481610be1565b82525050565b6000602082019050610c0f6000830184610beb565b92915050565b6000819050919050565b6000610c3a610c35610c3084610b56565b610c15565b610b56565b9050919050565b6000610c4c82610c1f565b9050919050565b6000610c5e82610c41565b9050919050565b610c6e81610c53565b82525050565b6000602082019050610c896000830184610c65565b92915050565b610c9881610b76565b82525050565b6000602082019050610cb36000830184610c8f565b92915050565b610cc281610be1565b8114610ccd57600080fd5b50565b600081359050610cdf81610cb9565b92915050565b600060208284031215610cfb57610cfa610b51565b5b6000610d0984828501610cd0565b91505092915050565b600081519050610d2181610cb9565b92915050565b600060208284031215610d3d57610d3c610b51565b5b6000610d4b84828501610d12565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610dbd82610be1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610df057610def610d83565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610e45600083610e2a565b9150610e5082610e35565b600082019050919050565b6000610e6682610e38565b9150819050919050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610eb7601b83610e70565b9150610ec282610e81565b602082019050919050565b60006020820190508181036000830152610ee681610eaa565b9050919050565b6000610ef882610be1565b9150610f0383610be1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610f3857610f37610d83565b5b828201905092915050565b6000610f4e82610be1565b9150610f5983610be1565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f9257610f91610d83565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610fd782610be1565b9150610fe283610be1565b925082610ff257610ff1610f9d565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b61101c81610ffd565b811461102757600080fd5b50565b60008151905061103981611013565b92915050565b6000819050919050565b6110528161103f565b811461105d57600080fd5b50565b60008151905061106f81611049565b92915050565b600080600080600060a0868803121561109157611090610b51565b5b600061109f8882890161102a565b95505060206110b088828901611060565b94505060406110c188828901610d12565b93505060606110d288828901610d12565b92505060806110e38882890161102a565b9150509295509295909350565b60006110fb8261103f565b91506111068361103f565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561114557611144610d83565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561118257611181610d83565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156111bf576111be610d83565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156111fc576111fb610d83565b5b82820290509291505056fea2646970667358221220d6910d1b35e043c764735bf14527635eee7550b421232e18b9f4411564f6e60264736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100915760003560e01c8063893d20e811610059578063893d20e81461016b5780639e87a5cd14610196578063b60d4288146101c1578063be2693f0146101cb578063d7b4750c146101e257610091565b80630343fb25146100965780630d8e6e2c146100d35780630ec3b027146100fe5780633ccfd60b146101295780636b69a59214610140575b600080fd5b3480156100a257600080fd5b506100bd60048036038101906100b89190610bb4565b61021f565b6040516100ca9190610bfa565b60405180910390f35b3480156100df57600080fd5b506100e8610268565b6040516100f59190610bfa565b60405180910390f35b34801561010a57600080fd5b5061011361030f565b6040516101209190610c74565b60405180910390f35b34801561013557600080fd5b5061013e610335565b005b34801561014c57600080fd5b5061015561055f565b6040516101629190610bfa565b60405180910390f35b34801561017757600080fd5b5061018061056c565b60405161018d9190610c9e565b60405180910390f35b3480156101a257600080fd5b506101ab610594565b6040516101b89190610c74565b60405180910390f35b6101c96105be565b005b3480156101d757600080fd5b506101e06106f9565b005b3480156101ee57600080fd5b5061020960048036038101906102049190610ce5565b610987565b6040516102169190610c9e565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156102d257600080fd5b505afa1580156102e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030a9190610d27565b905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103ba576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104655760008082815481106103df576103de610d54565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061045d90610db2565b9150506103bd565b50600067ffffffffffffffff81111561048157610480610dfb565b5b6040519080825280602002602001820160405280156104af5781602001602082028036833780820191505090505b50600090805190602001906104c5929190610aaa565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161050c90610e5b565b60006040518083038185875af1925050503d8060008114610549576040519150601f19603f3d011682016040523d82523d6000602084013e61054e565b606091505b505090508061055c57600080fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006105fd600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346109ce90919063ffffffff16565b101561063e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063590610ecd565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461068d9190610eed565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461077e576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561080157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116107b7575b5050505050905060005b815181101561088c57600082828151811061082957610828610d54565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061088490610db2565b91505061080b565b50600067ffffffffffffffff8111156108a8576108a7610dfb565b5b6040519080825280602002602001820160405280156108d65781602001602082028036833780820191505090505b50600090805190602001906108ec929190610aaa565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161093390610e5b565b60006040518083038185875af1925050503d8060008114610970576040519150601f19603f3d011682016040523d82523d6000602084013e610975565b606091505b505090508061098357600080fd5b5050565b600080828154811061099c5761099b610d54565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806109da83610a0a565b90506000670de0b6b3a764000085836109f39190610f43565b6109fd9190610fcc565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a5357600080fd5b505afa158015610a67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8b9190611075565b5050509150506402540be40081610aa291906110f0565b915050919050565b828054828255906000526020600020908101928215610b23579160200282015b82811115610b225782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610aca565b5b509050610b309190610b34565b5090565b5b80821115610b4d576000816000905550600101610b35565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b8182610b56565b9050919050565b610b9181610b76565b8114610b9c57600080fd5b50565b600081359050610bae81610b88565b92915050565b600060208284031215610bca57610bc9610b51565b5b6000610bd884828501610b9f565b91505092915050565b6000819050919050565b610bf481610be1565b82525050565b6000602082019050610c0f6000830184610beb565b92915050565b6000819050919050565b6000610c3a610c35610c3084610b56565b610c15565b610b56565b9050919050565b6000610c4c82610c1f565b9050919050565b6000610c5e82610c41565b9050919050565b610c6e81610c53565b82525050565b6000602082019050610c896000830184610c65565b92915050565b610c9881610b76565b82525050565b6000602082019050610cb36000830184610c8f565b92915050565b610cc281610be1565b8114610ccd57600080fd5b50565b600081359050610cdf81610cb9565b92915050565b600060208284031215610cfb57610cfa610b51565b5b6000610d0984828501610cd0565b91505092915050565b600081519050610d2181610cb9565b92915050565b600060208284031215610d3d57610d3c610b51565b5b6000610d4b84828501610d12565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610dbd82610be1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610df057610def610d83565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610e45600083610e2a565b9150610e5082610e35565b600082019050919050565b6000610e6682610e38565b9150819050919050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610eb7601b83610e70565b9150610ec282610e81565b602082019050919050565b60006020820190508181036000830152610ee681610eaa565b9050919050565b6000610ef882610be1565b9150610f0383610be1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610f3857610f37610d83565b5b828201905092915050565b6000610f4e82610be1565b9150610f5983610be1565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f9257610f91610d83565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610fd782610be1565b9150610fe283610be1565b925082610ff257610ff1610f9d565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b61101c81610ffd565b811461102757600080fd5b50565b60008151905061103981611013565b92915050565b6000819050919050565b6110528161103f565b811461105d57600080fd5b50565b60008151905061106f81611049565b92915050565b600080600080600060a0868803121561109157611090610b51565b5b600061109f8882890161102a565b95505060206110b088828901611060565b94505060406110c188828901610d12565b93505060606110d288828901610d12565b92505060806110e38882890161102a565b9150509295509295909350565b60006110fb8261103f565b91506111068361103f565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561114557611144610d83565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561118257611181610d83565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156111bf576111be610d83565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156111fc576111fb610d83565b5b82820290509291505056fea2646970667358221220d6910d1b35e043c764735bf14527635eee7550b421232e18b9f4411564f6e60264736f6c63430008080033",
  "devdoc": {
    "author": "Patrick Collins",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "getAddressToAmountFunded(address)": {
        "params": {
          "fundingAddress": "the address of the funder"
        },
        "returns": {
          "_0": "the amount funded"
        }
      }
    },
    "title": "A sample Funding Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "Funds our contract based on the ETH/USD price"
      },
      "getAddressToAmountFunded(address)": {
        "notice": "Gets the amount that an address has funded"
      }
    },
    "notice": "This contract is for creating a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 67,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 71,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}